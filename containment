# p4 python // containment 
class Card():
    # PRIVATE Number : INTEGER
    # PRIVATE Colour : STRING
    def __init__(self, NumberP, ColourP):
        self.__Colour = ColourP
        self.__Number = NumberP
    def GetNumber(self):
        return self.__Number
    def GetColour(self):
        return self.__Colour

OneRed = Card(1, "red")
TwoRed = Card(2, "red")
ThreeRed = Card(3, "red")
FourRed = Card(4, "red")
FiveRed = Card(5, "red")
OneBlue = Card(1, "blue")
TwoBlue = Card(2, "blue")
ThreeBlue = Card(3, "blue")
FourBlue = Card(4, "blue")
FiveBlue = Card(5, "blue")
OneYellow = Card(1, "yellow")
TwoYellow = Card(2, "red")
ThreeYellow = Card(3, "red")
FourYellow = Card(4, "red")
FiveYellow = Card(5, "red")


class Hand():
    # PRIVATE Cards : ARRAY OF Card
    # PRIVATE FirstCard : INTEGER
    # PRIVATE NumberOfCards : INTEGER
    def __init__(self, card1, card2, card3, card4, card5):
        self.__FirstCard = 0
        self.__NumberCards = 5
        self.__Cards = []
        self.__Cards.append(card1)
        self.__Cards.append(card2)
        self.__Cards.append(card3)
        self.__Cards.append(card4)
        self.__Cards.append(card5)

    def GetCard(self, index):
        temp = self.__Cards[index]
        return temp

player1 = Hand(OneRed, TwoRed, ThreeRed, FourRed, OneYellow)
player2 = Hand(TwoYellow, ThreeYellow, FourYellow, FiveYellow, OneBlue)

def CalculateValue(PlayerHand):
    score = 0
    for x in range(5):
        handcard = PlayerHand.GetCard(x)
        color = handcard.GetColour()
        number = handcard.GetNumber()
        if color == "red":
            score = score + 5
        elif color == "blue":
            score = score + 10
        else:
            score = score + 15
        score = score + number
    return score

score1 = CalculateValue(player1)
score2 = CalculateValue(player2)
if score1 > score2:
    print("Player 1 wins")
elif score2 > score1:
    print("Player 2 wins")
else:
    print("Draw")
